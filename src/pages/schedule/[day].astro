---
import { getEntry, getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { addMinutes, format, parseISO } from "date-fns";

const timeToNumber = (time: string) => {
  const [hours, minutes] = time.split(":").map(Number);
  return hours * 60 + minutes;
};

const numberToTime = (number: number) => {
  const hours = Math.floor(number / 60);
  const minutes = number % 60;
  return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;
};
export const getStaticPaths = async () => {
  const days = await getCollection("days");

  return days.map((day) => {
    return { params: { day: day.id } };
  });
};

const day = await getEntry("days", Astro.params.day);

const sessions = day.data.events
  .map((event) => {
    const startTime = parseISO(event.start);
    const start = format(startTime, "HH:mm");

    let duration = event.duration;

    // round to the nearest 5 minutes
    duration = Math.ceil(duration / 5) * 5;

    const end = format(addMinutes(startTime, duration), "HH:mm");

    return {
      ...event,
      start,
      end,
      type: event.event_type,
    };
  })
  .sort((a, b) => {
    return a.start.localeCompare(b.start);
  });

const sessionsByTime: { [key: string]: Array<(typeof sessions)[0]> } = {};

sessions.forEach((session) => {
  if (!sessionsByTime[session.start]) {
    sessionsByTime[session.start] = [];
  }

  sessionsByTime[session.start].push(session);
});

const sessionAndTimes = Object.entries(sessionsByTime);

for (let i = 0; i < sessionAndTimes.length - 1; i++) {
  const [, sessions] = sessionAndTimes[i];
  const [nextTime] = sessionAndTimes[i + 1];

  const endTimes = sessions.map((session) => timeToNumber(session.end));
  const endTime = Math.max(...endTimes);
  const nextStartTime = timeToNumber(nextTime);

  if (nextStartTime !== endTime) {
    const duration = nextStartTime - endTime;

    if (duration === 5) {
      const roomChangeTime = numberToTime(endTime);
      sessionsByTime[roomChangeTime] = [
        {
          title: "Room Change",
          start: roomChangeTime,
          duration: 5,
          end: numberToTime(endTime + 5),
          type: "room-change",
          event_type: "room-change",
          rooms: day.data.rooms.sort(),
        },
      ];
    } else {
      console.warn("Missing room change", endTime, nextStartTime, duration);
    }
  }
}

const slots = Object.entries(sessionsByTime)
  .sort()
  .map(([time, sessions]) => {
    let type: "session" | "break" | "lunch" | "room-change" = "session";

    if (sessions.every((session) => session.type === "break")) {
      type = "break";

      if (sessions[0].title.toLowerCase().includes("lunch")) {
        type = "lunch";
      }
    } else if (sessions.every((session) => session.type === "room-change")) {
      type = "room-change";
    }

    return { start: time, end: sessions[0].end, type: type };
  });

const gridRows = [
  // header row
  "var(--header-height)",
];

let row = 2;

const timeToRow: { [key: string]: number } = {};

for (let i = 0; i < slots.length; i++) {
  const current = slots[i];
  const next = slots[i + 1];

  const currentTime = timeToNumber(current.start);
  let nextTime;
  if (next) {
    nextTime = timeToNumber(next.start);
  } else {
    nextTime = timeToNumber(current.end);
  }

  const sizeInMinutes = nextTime - currentTime;
  const size = sizeInMinutes / 5;

  let sizeValue = `var(--5min)`;

  if (current.type === "break") {
    sizeValue = `var(--break)`;
  } else if (current.type === "lunch") {
    sizeValue = `var(--lunch)`;
  } else if (current.type === "room-change") {
    sizeValue = `var(--5min)`;
  }

  gridRows.push(`repeat(${size}, ${sizeValue})`);

  for (let i = 0; i < size; i++) {
    const time = numberToTime(currentTime + i * 5);
    timeToRow[time] = row;
    row += 1;
  }

  if (!next) {
    timeToRow[numberToTime(nextTime)] = row;
  }
}

const ROOMS = day.data.rooms.sort();

type Break = {
  type: "break" | "room-change";
  rooms: string[];
};

type Session = {
  type: "session";
  rooms: string[];
};

const getColStart = ({ type, rooms }: Break | Session) => {
  if (["room-change", "break"].includes(type)) {
    return 1;
  }

  const indexes = rooms.map((room) => ROOMS.indexOf(room));
  return Math.min(...indexes) + 2;
};

const getColEnd = ({ rooms }: Break | Session): number | "span" => {
  const indexes = rooms.map((room) => ROOMS.indexOf(room));
  return Math.max(...indexes) + 3;
};
---

<Layout title="Schedule" description="The schedule for the conference">
  <div class="schedule" style={{ gridTemplateRows: gridRows.join(" ") }}>
    <header>
      <div>time</div>
      {ROOMS.map((room) => <div>{room}</div>)}
    </header>

    {
      slots.map((slot) => (
        <div class="slot">
          <div
            class="time"
            style={{
              "--start": timeToRow[slot.start],
              "--end": timeToRow[slot.end],
            }}
          >
            <h2>{slot.start}</h2>
          </div>

          {sessionsByTime[slot.start].map((session) => (
            <div
              class={session.type}
              style={{
                "--start": timeToRow[session.start],
                "--end": timeToRow[session.end],
                "--col-start": getColStart(session),
                "--col-end": getColEnd(session),
              }}
            >
              <h2>
                <div>{session.title}</div>
              </h2>
              {session.description && <p>{session.description}</p>}
            </div>
          ))}
        </div>
      ))
    }

    <div class="h-12"></div>
  </div>

  <pre>{JSON.stringify(sessions, null, 2)}</pre>
  <pre>{JSON.stringify(sessionsByTime, null, 2)}</pre>
  <pre>{JSON.stringify(slots, null, 2)}</pre>

  <style>
    .schedule {
      --header-height: 30px;
      --break: 8px;
      --lunch: 8px;
      --minute: 4px;
      --5min: calc(var(--minute) * 5);

      display: grid;
      gap: 2px;
      grid-template-columns: 100px repeat(3, 1fr);

      header {
        display: contents;

        > * {
          grid-row: 1;
        }
      }
    }

    .slot {
      display: contents;
    }

    .session,
    .time,
    .room-change,
    .break {
      grid-row: var(--start) / var(--end);
      grid-column: var(--col-start) / var(--col-end);
    }

    .session,
    .time,
    .break,
    .room-change,
    header > div {
      outline: 2px solid var(--color-primary);
    }

    .time {
      padding: 0;
      grid-column: 1 / 2;
    }

    .break {
      background: var(--color-primary);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
    }

    .session {
      background: var(--color-secondary);
    }

    pre {
      max-height: 400px;
      overflow: auto;
      border: 1px solid var(--color-primary);
    }
  </style>
</Layout>
