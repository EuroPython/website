---
import { Schedule } from "../../components/schedule/schedule";
import Layout from "../../layouts/Layout.astro";
import { getSchedule } from "./get-schedule";

export const getStaticPaths = async () => {
  return [{ params: { day: "about" } }];
};

const schedule = await getSchedule();

// prettier-ignore
const sessions = [
  { type: "break", start: "09:00", end: "10:00", title: "Registration" },
  { type: "session", start: "10:00", end: "11:00", title: "Opening", description: "Opening remarks and introduction to the conference", rooms: ["Room 1", "Room 2", "Room 3"], },
  { type: "session", start: "11:00", end: "12:00", title: "Keynote", description: "Keynote speaker", rooms: ["Room 1", "Room 2", "Room 3"], },
  { type: "break", start: "12:00", end: "13:00", title: "Lunch" },
  { type: "session", start: "13:00", end: "13:30", title: "Session 1", rooms: ["Room 1"]},
  { type: "session", start: "13:00", end: "13:55", title: "Session 2", rooms: ["Room 2"]},
  { type: "session", start: "13:00", end: "13:30", title: "Session 3", rooms: ["Room 3"]},
  { type: "session", start: "13:30", end: "14:00", title: "Session 4", rooms: ["Room 1"]},
  { type: "session", start: "13:30", end: "14:00", title: "Session 6", rooms: ["Room 3"]},
  { type: "break", start: "14:00", end: "14:30", title: "Break" },
  { type: "session", start: "14:30", end: "15:00", title: "Session 7", rooms: ["Room 1"]},
  { type: "session", start: "14:30", end: "15:00", title: "Session 8", rooms: ["Room 2"]},
  { type: "session", start: "14:30", end: "15:00", title: "Session 9", rooms: ["Room 3"]},
  { type: "session", start: "15:00", end: "15:30", title: "Session 10", rooms: ["Room 1"]},
  { type: "session", start: "15:00", end: "15:30", title: "Session 11", rooms: ["Room 2"]},
  { type: "session", start: "15:00", end: "15:30", title: "Session 12", rooms: ["Room 3"]},
  { type: "break", start: "15:30", end: "16:00", title: "Break" },
  { type: "session", start: "16:00", end: "16:25", title: "Session 13", rooms: ["Room 1"]},
  { type: "session", start: "16:00", end: "16:20", title: "Session 14", rooms: ["Room 2"]},
  { type: "session", start: "16:00", end: "16:30", title: "Session 15", rooms: ["Room 3"]},
  // special event for testing
  { type: "session", start: "11:45", end: "12:20", title: "Special Event", rooms: ["Room 3"]},
] as const;

const slots = [
  { start: "09:00", end: "10:00", type: "break" },
  { start: "10:00", end: "10:30", type: "session" },
  { start: "10:30", end: "11:00", type: "session" },
  { start: "11:00", end: "11:30", type: "session" },
  { start: "11:30", end: "12:00", type: "session" },
  { start: "12:00", end: "12:30", type: "lunch" },
  { start: "12:30", end: "13:00", type: "lunch" },
  { start: "13:00", end: "13:30", type: "session" },
  { start: "13:30", end: "14:00", type: "session" },
  { start: "14:00", end: "14:30", type: "break" },
  { start: "14:30", end: "15:00", type: "session" },
  { start: "15:00", end: "15:30", type: "session" },
  { start: "15:30", end: "16:00", type: "break" },
  { start: "16:00", end: "16:30", type: "session" },
];

const gridRows = [
  // header row
  "var(--header-height)",
];

let row = 2;

const timeToRow: { [key: string]: number } = {};

const timeToNumber = (time: string) => {
  const [hours, minutes] = time.split(":").map(Number);
  return hours * 60 + minutes;
};

const numberToTime = (number: number) => {
  const hours = Math.floor(number / 60);
  const minutes = number % 60;
  return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;
};

for (const slot of slots) {
  const start = slot.start;

  let size = `var(--5min)`;

  if (slot.type === "break") {
    size = `var(--break)`;
  } else if (slot.type === "lunch") {
    size = `var(--lunch)`;
  }

  gridRows.push(`repeat(6, ${size})`);

  let currentTime = timeToNumber(start);

  for (let i = 0; i < 6; i++) {
    const time = numberToTime(currentTime);
    timeToRow[time] = row;
    row += 1;
    currentTime += 5;
  }
}

timeToRow["16:30"] = row;

console.log(timeToRow);

const ROOMS = ["Room 1", "Room 2", "Room 3"];

type Break = {
  type: "break";
  rooms: undefined;
};

type Session = {
  type: "session";
  rooms: string[];
};

const getColStart = ({ type, rooms }: Break | Session) => {
  if (type === "break") {
    return 2;
  }

  const indexes = rooms.map((room) => ROOMS.indexOf(room));
  return Math.min(...indexes) + 2;
};

const getColEnd = ({ type, rooms }: Break | Session): number | "span" => {
  if (type === "break") {
    return -1;
  }

  const indexes = rooms.map((room) => ROOMS.indexOf(room));
  return Math.max(...indexes) + 3;
};
---

<Layout title="Schedule" description="The schedule for the conference">
  <div class="schedule" style={{ gridTemplateRows: gridRows.join(" ") }}>
    <header>
      <div>time</div>
      {ROOMS.map((room) => <h1>{room}</h1>)}
    </header>

    {
      slots.map((slot) => (
        <div
          class="time"
          style={{
            "--start": timeToRow[slot.start],
            "--end": timeToRow[slot.end],
          }}
        >
          <h2>{slot.start}</h2>
        </div>
      ))
    }

    {
      sessions.map((session) => (
        <div
          class={session.type}
          style={{
            "--start": timeToRow[session.start],
            "--end": timeToRow[session.end],
            "--col-start": getColStart(session),
            "--col-end": getColEnd(session),
          }}
        >
          <h2>
            {session.start} {session.title}
          </h2>
          {session.description && <p>{session.description}</p>}
        </div>
      ))
    }
    <div class="h-12"></div>
  </div>

  <style>
    .schedule {
      --header-height: 30px;
      --break: 4px;
      --lunch: 8px;
      --minute: 4px;
      --5min: calc(var(--minute) * 5);

      display: grid;
      grid-template-columns: 100px repeat(3, 1fr);

      header {
        display: contents;

        > * {
          grid-row: 1;
        }
      }
    }

    .session,
    .time,
    .break {
      grid-row: var(--start) / var(--end);
      grid-column: var(--col-start) / var(--col-end);
    }

    .time {
      padding: 0;
    }

    .break {
      background: var(--color-primary);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
    }

    .session {
      border: 2px solid var(--color-primary);
    }
  </style>
</Layout>
