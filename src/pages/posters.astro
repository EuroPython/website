---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import Prose from "../components/prose/prose.astro";
import { Label } from "../components/form/label";
import { Select } from "../components/form/select";
import { Tag } from "../components/tag/tag";
import SessionSpeakers from "../components/session-speakers.astro";

const sessions = await getCollection("sessions");
const posters = sessions.filter(s => s.data.submission_type === "Poster");

const allTracks = Array.from(
  new Set(posters.map((session) => session.data.track).filter((track) => track))
).sort();

const allLevels = Array.from(
  new Set(posters.map((session) => session.data.level).filter((level) => level))
).sort();

const title = "Posters";

const description = "A list of all the posters at the conference";
---

<Layout title={title} description={description}>
  <div class="px-6">
    <Prose>
      <h1>Posters</h1>

      <p>
      During the lunch breaks on Wednesday, Thursday and Friday, we will host {posters.length} poster sessions. You can see them all below.
      </p>

      <p>
      The Posters will be available throughout the entire event. If you want to talk to the author of the poster, please visit the expo area during the scheduled poster session.
      </p>

      <h2>Filters</h2>
    </Prose>

    <form class="mb-12 filter-sessions">
      <div class="mb-6">
        <Label htmlFor="track">Track</Label>
        <Select id="track" name="track">
          <option value="">All</option>
          {allTracks.map((track) => <option value={track}>{track}</option>)}
        </Select>
      </div>

      <div class="mb-6">
        <Label htmlFor="level">Level</Label>
        <Select id="level" name="level">
          <option value="">All</option>
          {allLevels.map((level) => <option value={level}>{level}</option>)}
        </Select>
      </div>

      <button type="button" id="reset-filters" class="btn underline font-bold hover:text-primary-hover">Reset Filters</button>
    </form>

    <Prose>
      <h2>List of Posters</h2>
    </Prose>

    <ol class="sessions">
      {
        posters.map((session) => (
          <li
            class="mb-12"
            data-track={session.data.track}
            data-type={session.data.submission_type}
          >
            <Prose>
              <h4>
                <a href={`/session/${session.slug}`} class="underline">
                  {session.data.title}
                </a>
              </h4>

              <p>
                <span class="sr-only">Speakers:</span>

                <SessionSpeakers speakers={session.data.speakers} />
              </p>
            </Prose>

            <ul class="space-x-2 capitalize">
              {session.data.track && (
                <li class="inline-block">
                  <Tag>
                    <span class="sr-only">Track:</span>
                    {session.data.track}
                  </Tag>
                </li>
              )}

              {session.data.level && (
                <li class="inline-block">
                  <Tag>
                    <span class="sr-only">Level:</span>
                    {session.data.level}
                  </Tag>
                </li>
              )}
            </ul>
          </li>
        ))
      }
    </ol>
  </div>
</Layout>

<script>
  const forms = document.querySelectorAll("form.filter-sessions");

  function filterSessions() {
    forms.forEach((form) => {
      // @ts-ignore
      const track = form.querySelector("#track").value;
      // @ts-ignore
      const level = form.querySelector("#level").value;


      document.querySelectorAll("ol.sessions > li").forEach((session) => {
        const sessionTrack = session.getAttribute("data-track");
        const sessionLevel = session.getAttribute("data-level");

        if (
          (track === "" || sessionTrack === track) &&
          (level === "" || sessionLevel === level)
        ) {
          // @ts-ignore
          session.style.display = "block";
        } else {
          // @ts-ignore
          session.style.display = "none";
        }
      });
    });
  }

  forms.forEach((form) => {
    form.querySelectorAll("select").forEach((select) => {
      select.addEventListener("change", filterSessions);
    });

    const resetButton = form.querySelector("#reset-filters");
    resetButton?.addEventListener("click", () => {
      form.querySelectorAll("select").forEach((select) => {
        select.value = "";
      });
      filterSessions();
    });
  });
</script>
