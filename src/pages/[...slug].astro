---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";

import Prose from "../components/prose/prose.astro";
import { ButtonLink } from "../components/button-link";
import { Button } from "../components/button";
import { Separator } from "../components/separator/separator";

export async function getStaticPaths() {
  const posts = await getCollection("pages");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"pages">;

const post = Astro.props;
const { Content } = await post.render();

let title =
  post.data.title +
  " | EuroPython 2024 | July 8th-14th 2024 | Prague, Czech Republic & Remote";
const description = post.data.subtitle;
---

<!-- import Image from "next/image";
import { Map } from "./map";
import { MapSprints } from "./map-for-sprints";
import { MapSocial } from "./map-for-social";
import { ButtonWithTitle } from "./button-with-title";
import { SponsorTiers } from "./sponsor-tiers";
import { BenefitItem, BenefitsList } from "./benefits-list";
import { ButtonLink } from "./button-link";
import { Button } from "./button";
import { Note } from "./note";
import clsx from "clsx";
import { Separator } from "./separator/separator";
import { Title } from "../../src/components/typography/title";
import { Link } from "../../src/components/link/link";

export const components = {

  blockquote: ({ children }: any) => (
    <blockquote className="border-l-4 border-primary pl-4 mb-4">
      {children}
    </blockquote>
  ),
  hr: Separator,
  article: ({ children, className }: any) => (
    <article className={clsx(className, "mb-24")}>{children}</article>
  ),
  Map,
  MapSprints,
  MapSocial,
  ButtonWithTitle,
  SponsorTiers,

  details: ({ children, ...props }: any) => (
    <details className="mb-4" {...props}>
      {children}
    </details>
  ),

  summary: ({ children, ...props }: any) => (
    <summary className="list-none underline cursor-pointer" {...props}>
      {children}
    </summary>
  ),


  // TODO: these two are not working together
  BenefitItem,
  BenefitsList,
  Note,

  pre: ({ children, ...props }: any) => (
    <pre {...props} className="p-3 bg-secondary-light text-[0.9em] [&>code]:p-0 rounded-xl">
      {children}
    </pre>
  ),

  code: ({ children, ...props }: any) => (
    <code {...props} className="p-1 bg-secondary-light text-[0.9em]">
      {children}
    </code>
  ),

  img: ({ src, alt, ...props }: any) => {
    props.objectFit = "contain";

    let Component: string | typeof Image = Image;

    if (!props.width && !props.height) {
      Component = "img";
    }

    if (props.className?.includes("findaid-accent-round-marker")) {
      alt = "";
    }

    return (
      <figure className="next-image relative">
        <Component src={src} alt={alt} {...props} />
        {alt && <figcaption>{alt}</figcaption>}
      </figure>
    );
  },
}; -->
<Layout title={title} description={description}>
  <Prose class="mx-auto pb-12 px-6">
    <Content
      components={{
        ButtonLink,
        Button,
        hr: Separator,
      }}
    />
  </Prose>
</Layout>
