---
import { formatInTimeZone } from "date-fns-tz";
import Speakers from "./speakers.astro";

export interface Props {
  style: any;
  session: {
    slug?: string;
    title: string;
    start: Date;
    end: Date;
    description?: string;
    level?: string | null;
    speakers?: { code: string }[];
    sessionType?: string;
  };
}

const { style, session } = Astro.props;
---

<a
  href={session.slug && `/session/${session.slug}`}
  class="session"
  style={style}
>
  <header class:list={[session.level]}>
    {
      session.level && (
        <>
          <span class="sr-only">Session level:</span>
          {session.level}
        </>
      )
    }
  </header>

  <div class="time">
    <span class="sr-only">Session start:</span>
    <time>
      {formatInTimeZone(session.start, "Europe/Prague", "HH:mm")}
    </time>

    <span class="minus">-</span>
    <span class="sr-only">Session end:</span>
    <time>{formatInTimeZone(session.end, "Europe/Prague", "HH:mm")}</time>
  </div>

  <h2>{session.title}</h2>
  {
    session.speakers && session.speakers.length > 0 && (
      <footer>
        <Speakers speakers={session.speakers} />
      </footer>
    )
  }
</a>

<style>
  .session {
    font-weight: bold;
    display: grid;
    flex-direction: column;
    background-color: var(--color-body-background);

    grid-template-areas:
      "header header"
      "time title"
      "time footer";

    grid-template-columns: 60px 1fr;

    @media screen and (min-width: 640px) {
      display: flex;
    }
  }

  .session > header {
    grid-area: header;
  }

  @media screen and (max-width: 639px) {
    .session > .time {
      grid-area: time;
      padding-block: 8px;

      display: flex;
      flex-direction: column;
      align-items: center;
      border-right: 1px solid var(--color-text);
      gap: 4px;

      & .minus {
        display: none;
      }
    }

    .session > h2 {
      grid-area: title;
      padding-block: 8px;
    }

    .session > footer {
      grid-area: footer;
    }

    .session > div {
      display: flex;
    }
  }

  .session[href]:not([href=""]):hover {
    background-color: color-mix(
      in srgb,
      var(--color-body-background),
      white 40%
    );
  }

  .time,
  footer {
    font-size: 0.9em;
  }

  header,
  .time,
  footer,
  h2 {
    padding: 0.2em 0.5em;
  }

  h2 {
    margin-bottom: 1em;
  }

  footer {
    border-top: 1px solid var(--color-text);
    margin-top: auto;
  }

  header {
    background-color: var(--color-primary);
    border-bottom: 2px solid var(--color-primary);
    text-transform: capitalize;
    font-size: 0.8em;
  }

  header.beginner {
    background-color: var(--color-session-beginner);
  }

  header.intermediate {
    background-color: var(--color-session-intermediate);
  }

  header.advanced {
    background-color: var(--color-session-advanced);
  }
</style>
