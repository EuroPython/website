- name: Deploy content to static server
  hosts: all
  vars:
    branch_list:
      - ep2024
      - ep2025
    branch_name:
      "{{ lookup('pipe', 'git rev-parse --abbrev-ref HEAD') | trim }}"
    sanitized_branch_name:
      "{{ branch_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"
    remote_base_path: "/home/{{ ansible_user }}/content"

  tasks:
    - name: Generate UUID for temp directory
      ansible.builtin.set_fact:
        unique_id: "{{ lookup('pipe', 'uuidgen') }}"

    - name: Define and trim deploy path
      ansible.builtin.set_fact:
        deploy_path: >-
          {{
            (
              remote_base_path + '/europython_websites/' + branch_name
              if branch_name in branch_list else
              remote_base_path + '/previews/' + sanitized_branch_name
            ) | trim
          }}
        temp_dir: "{{ remote_base_path }}/temp/{{ unique_id }}"

    - name: Show deployment configuration
      ansible.builtin.debug:
        msg:
          - "Branch Name: '{{ branch_name }}'"
          - "Sanitized Branch Name: '{{ sanitized_branch_name }}'"
          - "Remote Base Path: '{{ remote_base_path }}'"
          - "Deploy Path: '{{ deploy_path }}'"
          - "Temp Dir: '{{ temp_dir }}'"

    - name: Ensure the temporary destination directory exists
      ansible.builtin.file:
        path: "{{ temp_dir }}"
        state: directory
        recurse: true
        mode: 750

    - name: Synchronize local files to remote temporary directory
      ansible.posix.synchronize:
        src: dist/
        dest: "{{ deploy_path }}/"
        mode: push
        checksum: true
        delete: true

    - name: Verify deployment success
      ansible.builtin.find:
        paths: "{{ deploy_path }}"
        recurse: true
        age: -1d
      register: target_dir_check
      failed_when: target_dir_check.matched == 0

    - name: Confirm deployment success
      debug:
        msg: "Files successfully deployed to '{{ deploy_path }}/'."
